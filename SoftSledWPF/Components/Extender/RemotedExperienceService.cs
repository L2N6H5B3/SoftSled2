using Intel.UPNP;
using SoftSled.Components.Diagnostics;

namespace SoftSled.Components.Extender {
    /// <summary>
    /// Transparent DeviceSide UPnP Service
    /// </summary>
    public class RemotedExperienceService : IUPnPService {
        private Logger m_logger;

        public RemotedExperienceService(Logger logger) : this() {
            m_logger = logger;
        }

        // Place your declarations above this line

        #region AutoGenerated Code Section [Do NOT Modify, unless you know what you're doing]
        //{{{{{ Begin Code Block

        private _RemotedExperienceService _S;
        public static string URN = "urn:schemas-microsoft-com:service:msremotedexperience:1";
        public double VERSION {
            get {
                return (double.Parse(_S.GetUPnPService().Version));
            }
        }

        public delegate void OnStateVariableModifiedHandler(RemotedExperienceService sender);
        public event OnStateVariableModifiedHandler OnStateVariableModified_A_ARG_TYPE_EndpointID;
        public event OnStateVariableModifiedHandler OnStateVariableModified_A_ARG_TYPE_AnyString;
        public event OnStateVariableModifiedHandler OnStateVariableModified_A_ARG_TYPE_SignAlgorithmList;
        public event OnStateVariableModifiedHandler OnStateVariableModified_A_ARG_TYPE_Bool;
        public event OnStateVariableModifiedHandler OnStateVariableModified_A_ARG_TYPE_ReasonCode;
        public event OnStateVariableModifiedHandler OnStateVariableModified_A_ARG_TYPE_Uri;
        public event OnStateVariableModifiedHandler OnStateVariableModified_A_ARG_TYPE_Certificate;
        public event OnStateVariableModifiedHandler OnStateVariableModified_A_ARG_TYPE_Version;
        public event OnStateVariableModifiedHandler OnStateVariableModified_A_ARG_TYPE_Name;
        public event OnStateVariableModifiedHandler OnStateVariableModified_A_ARG_TYPE_SignAlgorithm;
        public event OnStateVariableModifiedHandler OnStateVariableModified_A_ARG_TYPE_Signature;
        public event OnStateVariableModifiedHandler OnStateVariableModified_A_ARG_TYPE_Nonce;
        public System.String A_ARG_TYPE_EndpointID {
            get {
                return ((System.String)_S.GetStateVariable("A_ARG_TYPE_EndpointID"));
            }
            set {
                _S.SetStateVariable("A_ARG_TYPE_EndpointID", value);
            }
        }
        public System.String A_ARG_TYPE_AnyString {
            get {
                return ((System.String)_S.GetStateVariable("A_ARG_TYPE_AnyString"));
            }
            set {
                _S.SetStateVariable("A_ARG_TYPE_AnyString", value);
            }
        }
        public System.String A_ARG_TYPE_SignAlgorithmList {
            get {
                return ((System.String)_S.GetStateVariable("A_ARG_TYPE_SignAlgorithmList"));
            }
            set {
                _S.SetStateVariable("A_ARG_TYPE_SignAlgorithmList", value);
            }
        }
        public System.Boolean A_ARG_TYPE_Bool {
            get {
                return ((System.Boolean)_S.GetStateVariable("A_ARG_TYPE_Bool"));
            }
            set {
                _S.SetStateVariable("A_ARG_TYPE_Bool", value);
            }
        }
        public System.UInt32 A_ARG_TYPE_ReasonCode {
            get {
                return ((System.UInt32)_S.GetStateVariable("A_ARG_TYPE_ReasonCode"));
            }
            set {
                _S.SetStateVariable("A_ARG_TYPE_ReasonCode", value);
            }
        }
        public System.String A_ARG_TYPE_Uri {
            get {
                return ((System.String)_S.GetStateVariable("A_ARG_TYPE_Uri"));
            }
            set {
                _S.SetStateVariable("A_ARG_TYPE_Uri", value);
            }
        }
        public System.String A_ARG_TYPE_Certificate {
            get {
                return ((System.String)_S.GetStateVariable("A_ARG_TYPE_Certificate"));
            }
            set {
                _S.SetStateVariable("A_ARG_TYPE_Certificate", value);
            }
        }
        public System.String A_ARG_TYPE_Version {
            get {
                return ((System.String)_S.GetStateVariable("A_ARG_TYPE_Version"));
            }
            set {
                _S.SetStateVariable("A_ARG_TYPE_Version", value);
            }
        }
        public System.String A_ARG_TYPE_Name {
            get {
                return ((System.String)_S.GetStateVariable("A_ARG_TYPE_Name"));
            }
            set {
                _S.SetStateVariable("A_ARG_TYPE_Name", value);
            }
        }
        public System.String A_ARG_TYPE_SignAlgorithm {
            get {
                return ((System.String)_S.GetStateVariable("A_ARG_TYPE_SignAlgorithm"));
            }
            set {
                _S.SetStateVariable("A_ARG_TYPE_SignAlgorithm", value);
            }
        }
        public System.String A_ARG_TYPE_Signature {
            get {
                return ((System.String)_S.GetStateVariable("A_ARG_TYPE_Signature"));
            }
            set {
                _S.SetStateVariable("A_ARG_TYPE_Signature", value);
            }
        }
        public System.UInt32 A_ARG_TYPE_Nonce {
            get {
                return ((System.UInt32)_S.GetStateVariable("A_ARG_TYPE_Nonce"));
            }
            set {
                _S.SetStateVariable("A_ARG_TYPE_Nonce", value);
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_A_ARG_TYPE_EndpointID {
            get {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_EndpointID")).Accumulator);
            }
            set {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_EndpointID")).Accumulator = value;
            }
        }
        public double ModerationDuration_A_ARG_TYPE_EndpointID {
            get {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_EndpointID")).ModerationPeriod);
            }
            set {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_EndpointID")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_A_ARG_TYPE_AnyString {
            get {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_AnyString")).Accumulator);
            }
            set {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_AnyString")).Accumulator = value;
            }
        }
        public double ModerationDuration_A_ARG_TYPE_AnyString {
            get {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_AnyString")).ModerationPeriod);
            }
            set {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_AnyString")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_A_ARG_TYPE_SignAlgorithmList {
            get {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_SignAlgorithmList")).Accumulator);
            }
            set {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_SignAlgorithmList")).Accumulator = value;
            }
        }
        public double ModerationDuration_A_ARG_TYPE_SignAlgorithmList {
            get {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_SignAlgorithmList")).ModerationPeriod);
            }
            set {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_SignAlgorithmList")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_A_ARG_TYPE_Bool {
            get {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Bool")).Accumulator);
            }
            set {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Bool")).Accumulator = value;
            }
        }
        public double ModerationDuration_A_ARG_TYPE_Bool {
            get {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Bool")).ModerationPeriod);
            }
            set {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Bool")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_A_ARG_TYPE_ReasonCode {
            get {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_ReasonCode")).Accumulator);
            }
            set {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_ReasonCode")).Accumulator = value;
            }
        }
        public double ModerationDuration_A_ARG_TYPE_ReasonCode {
            get {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_ReasonCode")).ModerationPeriod);
            }
            set {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_ReasonCode")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_A_ARG_TYPE_Uri {
            get {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Uri")).Accumulator);
            }
            set {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Uri")).Accumulator = value;
            }
        }
        public double ModerationDuration_A_ARG_TYPE_Uri {
            get {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Uri")).ModerationPeriod);
            }
            set {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Uri")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_A_ARG_TYPE_Certificate {
            get {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Certificate")).Accumulator);
            }
            set {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Certificate")).Accumulator = value;
            }
        }
        public double ModerationDuration_A_ARG_TYPE_Certificate {
            get {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Certificate")).ModerationPeriod);
            }
            set {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Certificate")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_A_ARG_TYPE_Version {
            get {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Version")).Accumulator);
            }
            set {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Version")).Accumulator = value;
            }
        }
        public double ModerationDuration_A_ARG_TYPE_Version {
            get {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Version")).ModerationPeriod);
            }
            set {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Version")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_A_ARG_TYPE_Name {
            get {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Name")).Accumulator);
            }
            set {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Name")).Accumulator = value;
            }
        }
        public double ModerationDuration_A_ARG_TYPE_Name {
            get {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Name")).ModerationPeriod);
            }
            set {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Name")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_A_ARG_TYPE_SignAlgorithm {
            get {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_SignAlgorithm")).Accumulator);
            }
            set {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_SignAlgorithm")).Accumulator = value;
            }
        }
        public double ModerationDuration_A_ARG_TYPE_SignAlgorithm {
            get {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_SignAlgorithm")).ModerationPeriod);
            }
            set {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_SignAlgorithm")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_A_ARG_TYPE_Signature {
            get {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Signature")).Accumulator);
            }
            set {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Signature")).Accumulator = value;
            }
        }
        public double ModerationDuration_A_ARG_TYPE_Signature {
            get {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Signature")).ModerationPeriod);
            }
            set {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Signature")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_A_ARG_TYPE_Nonce {
            get {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Nonce")).Accumulator);
            }
            set {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Nonce")).Accumulator = value;
            }
        }
        public double ModerationDuration_A_ARG_TYPE_Nonce {
            get {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Nonce")).ModerationPeriod);
            }
            set {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Nonce")).ModerationPeriod = value;
            }
        }
        public delegate void Delegate_AcquireNonce(System.String HostId, out System.UInt32 Nonce, out System.String SupportedSignatureAlgorithms, out System.Boolean AttachCertificate);
        public delegate void Delegate_Advertise(System.UInt32 Nonce, System.String HostId, System.String ApplicationId, System.String ApplicationVersion, System.String ApplicationData, System.String HostFriendlyName, System.String ExperienceFriendlyName, System.String ExperienceIconUri, System.String ExperienceEndpointUri, System.String ExperienceEndpointData, System.String SignatureAlgorithm, System.String Signature, System.String HostCertificate);
        public delegate void Delegate_Inhibit(System.UInt32 Nonce, System.String HostId, System.String ApplicationId, System.String ApplicationVersion, System.String ApplicationData, System.UInt32 ReasonCode, System.String ReasonMessage, System.String SignatureAlgorithm, System.String Signature, System.String HostCertificate);

        public Delegate_AcquireNonce External_AcquireNonce = null;
        public Delegate_Advertise External_Advertise = null;
        public Delegate_Inhibit External_Inhibit = null;

        public void RemoveStateVariable_A_ARG_TYPE_EndpointID() {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_EndpointID"));
        }
        public void RemoveStateVariable_A_ARG_TYPE_AnyString() {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_AnyString"));
        }
        public void RemoveStateVariable_A_ARG_TYPE_SignAlgorithmList() {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_SignAlgorithmList"));
        }
        public void RemoveStateVariable_A_ARG_TYPE_Bool() {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Bool"));
        }
        public void RemoveStateVariable_A_ARG_TYPE_ReasonCode() {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_ReasonCode"));
        }
        public void RemoveStateVariable_A_ARG_TYPE_Uri() {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Uri"));
        }
        public void RemoveStateVariable_A_ARG_TYPE_Certificate() {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Certificate"));
        }
        public void RemoveStateVariable_A_ARG_TYPE_Version() {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Version"));
        }
        public void RemoveStateVariable_A_ARG_TYPE_Name() {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Name"));
        }
        public void RemoveStateVariable_A_ARG_TYPE_SignAlgorithm() {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_SignAlgorithm"));
        }
        public void RemoveStateVariable_A_ARG_TYPE_Signature() {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Signature"));
        }
        public void RemoveStateVariable_A_ARG_TYPE_Nonce() {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Nonce"));
        }
        public void RemoveAction_AcquireNonce() {
            _S.GetUPnPService().RemoveMethod("AcquireNonce");
        }
        public void RemoveAction_Advertise() {
            _S.GetUPnPService().RemoveMethod("Advertise");
        }
        public void RemoveAction_Inhibit() {
            _S.GetUPnPService().RemoveMethod("Inhibit");
        }
        public System.Net.IPEndPoint GetCaller() {
            return (_S.GetUPnPService().GetCaller());
        }
        public System.Net.IPEndPoint GetReceiver() {
            return (_S.GetUPnPService().GetReceiver());
        }

        private class _RemotedExperienceService {
            private RemotedExperienceService Outer = null;
            private UPnPService S;
            internal _RemotedExperienceService(RemotedExperienceService n) {
                Outer = n;
                S = BuildUPnPService();
            }
            public UPnPService GetUPnPService() {
                return (S);
            }
            public void SetStateVariable(string VarName, object VarValue) {
                S.SetStateVariable(VarName, VarValue);
            }
            public object GetStateVariable(string VarName) {
                return (S.GetStateVariable(VarName));
            }
            protected UPnPService BuildUPnPService() {
                UPnPStateVariable[] RetVal = new UPnPStateVariable[12];
                RetVal[0] = new UPnPModeratedStateVariable("A_ARG_TYPE_EndpointID", typeof(System.String), false);
                RetVal[0].AddAssociation("AcquireNonce", "HostId");
                RetVal[0].AddAssociation("Advertise", "HostId");
                RetVal[0].AddAssociation("Advertise", "ApplicationId");
                RetVal[0].AddAssociation("Inhibit", "HostId");
                RetVal[0].AddAssociation("Inhibit", "ApplicationId");
                RetVal[1] = new UPnPModeratedStateVariable("A_ARG_TYPE_AnyString", typeof(System.String), false);
                RetVal[1].AddAssociation("Advertise", "ApplicationData");
                RetVal[1].AddAssociation("Advertise", "ExperienceEndpointData");
                RetVal[1].AddAssociation("Inhibit", "ApplicationData");
                RetVal[1].AddAssociation("Inhibit", "ReasonMessage");
                RetVal[2] = new UPnPModeratedStateVariable("A_ARG_TYPE_SignAlgorithmList", typeof(System.String), false);
                RetVal[2].AddAssociation("AcquireNonce", "SupportedSignatureAlgorithms");
                RetVal[3] = new UPnPModeratedStateVariable("A_ARG_TYPE_Bool", typeof(System.Boolean), false);
                RetVal[3].AddAssociation("AcquireNonce", "AttachCertificate");
                RetVal[4] = new UPnPModeratedStateVariable("A_ARG_TYPE_ReasonCode", typeof(System.UInt32), false);
                RetVal[4].AddAssociation("Inhibit", "ReasonCode");
                RetVal[5] = new UPnPModeratedStateVariable("A_ARG_TYPE_Uri", typeof(System.String), false);
                RetVal[5].AddAssociation("Advertise", "ExperienceIconUri");
                RetVal[5].AddAssociation("Advertise", "ExperienceEndpointUri");
                RetVal[6] = new UPnPModeratedStateVariable("A_ARG_TYPE_Certificate", typeof(System.String), false);
                RetVal[6].AddAssociation("Advertise", "HostCertificate");
                RetVal[6].AddAssociation("Inhibit", "HostCertificate");
                RetVal[7] = new UPnPModeratedStateVariable("A_ARG_TYPE_Version", typeof(System.String), false);
                RetVal[7].AddAssociation("Advertise", "ApplicationVersion");
                RetVal[7].AddAssociation("Inhibit", "ApplicationVersion");
                RetVal[8] = new UPnPModeratedStateVariable("A_ARG_TYPE_Name", typeof(System.String), false);
                RetVal[8].AddAssociation("Advertise", "HostFriendlyName");
                RetVal[8].AddAssociation("Advertise", "ExperienceFriendlyName");
                RetVal[9] = new UPnPModeratedStateVariable("A_ARG_TYPE_SignAlgorithm", typeof(System.String), false);
                RetVal[9].AddAssociation("Advertise", "SignatureAlgorithm");
                RetVal[9].AddAssociation("Inhibit", "SignatureAlgorithm");
                RetVal[10] = new UPnPModeratedStateVariable("A_ARG_TYPE_Signature", typeof(System.String), false);
                RetVal[10].AddAssociation("Advertise", "Signature");
                RetVal[10].AddAssociation("Inhibit", "Signature");
                RetVal[11] = new UPnPModeratedStateVariable("A_ARG_TYPE_Nonce", typeof(System.UInt32), false);
                RetVal[11].AddAssociation("AcquireNonce", "Nonce");
                RetVal[11].AddAssociation("Advertise", "Nonce");
                RetVal[11].AddAssociation("Inhibit", "Nonce");

                UPnPService S = new UPnPService(1, "urn:schemas-microsoft-com:serviceId:MSRX", "urn:schemas-microsoft-com:service:msremotedexperience:1", true, this);
                for (int i = 0; i < RetVal.Length; ++i) {
                    S.AddStateVariable(RetVal[i]);
                }
                S.AddMethod("AcquireNonce");
                S.AddMethod("Advertise");
                S.AddMethod("Inhibit");
                return (S);
            }

            public void AcquireNonce(System.String HostId, out System.UInt32 Nonce, out System.String SupportedSignatureAlgorithms, out System.Boolean AttachCertificate) {
                if (Outer.External_AcquireNonce != null) {
                    Outer.External_AcquireNonce(HostId, out Nonce, out SupportedSignatureAlgorithms, out AttachCertificate);
                } else {
                    Sink_AcquireNonce(HostId, out Nonce, out SupportedSignatureAlgorithms, out AttachCertificate);
                }
            }
            public void Advertise(System.UInt32 Nonce, System.String HostId, System.String ApplicationId, System.String ApplicationVersion, System.String ApplicationData, System.String HostFriendlyName, System.String ExperienceFriendlyName, System.String ExperienceIconUri, System.String ExperienceEndpointUri, System.String ExperienceEndpointData, System.String SignatureAlgorithm, System.String Signature, System.String HostCertificate) {
                if (Outer.External_Advertise != null) {
                    Outer.External_Advertise(Nonce, HostId, ApplicationId, ApplicationVersion, ApplicationData, HostFriendlyName, ExperienceFriendlyName, ExperienceIconUri, ExperienceEndpointUri, ExperienceEndpointData, SignatureAlgorithm, Signature, HostCertificate);
                } else {
                    Sink_Advertise(Nonce, HostId, ApplicationId, ApplicationVersion, ApplicationData, HostFriendlyName, ExperienceFriendlyName, ExperienceIconUri, ExperienceEndpointUri, ExperienceEndpointData, SignatureAlgorithm, Signature, HostCertificate);
                }
            }
            public void Inhibit(System.UInt32 Nonce, System.String HostId, System.String ApplicationId, System.String ApplicationVersion, System.String ApplicationData, System.UInt32 ReasonCode, System.String ReasonMessage, System.String SignatureAlgorithm, System.String Signature, System.String HostCertificate) {
                if (Outer.External_Inhibit != null) {
                    Outer.External_Inhibit(Nonce, HostId, ApplicationId, ApplicationVersion, ApplicationData, ReasonCode, ReasonMessage, SignatureAlgorithm, Signature, HostCertificate);
                } else {
                    Sink_Inhibit(Nonce, HostId, ApplicationId, ApplicationVersion, ApplicationData, ReasonCode, ReasonMessage, SignatureAlgorithm, Signature, HostCertificate);
                }
            }

            public Delegate_AcquireNonce Sink_AcquireNonce;
            public Delegate_Advertise Sink_Advertise;
            public Delegate_Inhibit Sink_Inhibit;
        }
        public RemotedExperienceService() {
            _S = new _RemotedExperienceService(this);
            _S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_EndpointID").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_A_ARG_TYPE_EndpointID);
            _S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_AnyString").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_A_ARG_TYPE_AnyString);
            _S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_SignAlgorithmList").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_A_ARG_TYPE_SignAlgorithmList);
            _S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Bool").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_A_ARG_TYPE_Bool);
            _S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_ReasonCode").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_A_ARG_TYPE_ReasonCode);
            _S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Uri").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_A_ARG_TYPE_Uri);
            _S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Certificate").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_A_ARG_TYPE_Certificate);
            _S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Version").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_A_ARG_TYPE_Version);
            _S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Name").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_A_ARG_TYPE_Name);
            _S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_SignAlgorithm").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_A_ARG_TYPE_SignAlgorithm);
            _S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Signature").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_A_ARG_TYPE_Signature);
            _S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Nonce").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_A_ARG_TYPE_Nonce);
            _S.Sink_AcquireNonce = new Delegate_AcquireNonce(AcquireNonce);
            _S.Sink_Advertise = new Delegate_Advertise(Advertise);
            _S.Sink_Inhibit = new Delegate_Inhibit(Inhibit);
        }
        public RemotedExperienceService(string ID)
            : this() {
            _S.GetUPnPService().ServiceID = ID;
        }
        public UPnPService GetUPnPService() {
            return (_S.GetUPnPService());
        }
        private void OnModifiedSink_A_ARG_TYPE_EndpointID(UPnPStateVariable sender, object NewValue) {
            if (OnStateVariableModified_A_ARG_TYPE_EndpointID != null) OnStateVariableModified_A_ARG_TYPE_EndpointID(this);
        }
        private void OnModifiedSink_A_ARG_TYPE_AnyString(UPnPStateVariable sender, object NewValue) {
            if (OnStateVariableModified_A_ARG_TYPE_AnyString != null) OnStateVariableModified_A_ARG_TYPE_AnyString(this);
        }
        private void OnModifiedSink_A_ARG_TYPE_SignAlgorithmList(UPnPStateVariable sender, object NewValue) {
            if (OnStateVariableModified_A_ARG_TYPE_SignAlgorithmList != null) OnStateVariableModified_A_ARG_TYPE_SignAlgorithmList(this);
        }
        private void OnModifiedSink_A_ARG_TYPE_Bool(UPnPStateVariable sender, object NewValue) {
            if (OnStateVariableModified_A_ARG_TYPE_Bool != null) OnStateVariableModified_A_ARG_TYPE_Bool(this);
        }
        private void OnModifiedSink_A_ARG_TYPE_ReasonCode(UPnPStateVariable sender, object NewValue) {
            if (OnStateVariableModified_A_ARG_TYPE_ReasonCode != null) OnStateVariableModified_A_ARG_TYPE_ReasonCode(this);
        }
        private void OnModifiedSink_A_ARG_TYPE_Uri(UPnPStateVariable sender, object NewValue) {
            if (OnStateVariableModified_A_ARG_TYPE_Uri != null) OnStateVariableModified_A_ARG_TYPE_Uri(this);
        }
        private void OnModifiedSink_A_ARG_TYPE_Certificate(UPnPStateVariable sender, object NewValue) {
            if (OnStateVariableModified_A_ARG_TYPE_Certificate != null) OnStateVariableModified_A_ARG_TYPE_Certificate(this);
        }
        private void OnModifiedSink_A_ARG_TYPE_Version(UPnPStateVariable sender, object NewValue) {
            if (OnStateVariableModified_A_ARG_TYPE_Version != null) OnStateVariableModified_A_ARG_TYPE_Version(this);
        }
        private void OnModifiedSink_A_ARG_TYPE_Name(UPnPStateVariable sender, object NewValue) {
            if (OnStateVariableModified_A_ARG_TYPE_Name != null) OnStateVariableModified_A_ARG_TYPE_Name(this);
        }
        private void OnModifiedSink_A_ARG_TYPE_SignAlgorithm(UPnPStateVariable sender, object NewValue) {
            if (OnStateVariableModified_A_ARG_TYPE_SignAlgorithm != null) OnStateVariableModified_A_ARG_TYPE_SignAlgorithm(this);
        }
        private void OnModifiedSink_A_ARG_TYPE_Signature(UPnPStateVariable sender, object NewValue) {
            if (OnStateVariableModified_A_ARG_TYPE_Signature != null) OnStateVariableModified_A_ARG_TYPE_Signature(this);
        }
        private void OnModifiedSink_A_ARG_TYPE_Nonce(UPnPStateVariable sender, object NewValue) {
            if (OnStateVariableModified_A_ARG_TYPE_Nonce != null) OnStateVariableModified_A_ARG_TYPE_Nonce(this);
        }
        //}}}}} End of Code Block

        #endregion

        /// <summary>
        /// Action: AcquireNonce
        /// </summary>
        /// <param name="HostId">Associated State Variable: A_ARG_TYPE_EndpointID</param>
        /// <param name="Nonce">Associated State Variable: A_ARG_TYPE_Nonce</param>
        /// <param name="SupportedSignatureAlgorithms">Associated State Variable: A_ARG_TYPE_SignAlgorithmList</param>
        /// <param name="AttachCertificate">Associated State Variable: A_ARG_TYPE_Bool</param>
        public void AcquireNonce(System.String HostId, out System.UInt32 Nonce, out System.String SupportedSignatureAlgorithms, out System.Boolean AttachCertificate) {
            System.Diagnostics.Debug.WriteLine("RemotedExperienceService.AcquireNonce(" + HostId.ToString() + ")");
            //ToDo: Add Your implementation here, and remove exception
            throw (new UPnPCustomException(800, "This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: Advertise
        /// </summary>
        /// <param name="Nonce">Associated State Variable: A_ARG_TYPE_Nonce</param>
        /// <param name="HostId">Associated State Variable: A_ARG_TYPE_EndpointID</param>
        /// <param name="ApplicationId">Associated State Variable: A_ARG_TYPE_EndpointID</param>
        /// <param name="ApplicationVersion">Associated State Variable: A_ARG_TYPE_Version</param>
        /// <param name="ApplicationData">Associated State Variable: A_ARG_TYPE_AnyString</param>
        /// <param name="HostFriendlyName">Associated State Variable: A_ARG_TYPE_Name</param>
        /// <param name="ExperienceFriendlyName">Associated State Variable: A_ARG_TYPE_Name</param>
        /// <param name="ExperienceIconUri">Associated State Variable: A_ARG_TYPE_Uri</param>
        /// <param name="ExperienceEndpointUri">Associated State Variable: A_ARG_TYPE_Uri</param>
        /// <param name="ExperienceEndpointData">Associated State Variable: A_ARG_TYPE_AnyString</param>
        /// <param name="SignatureAlgorithm">Associated State Variable: A_ARG_TYPE_SignAlgorithm</param>
        /// <param name="Signature">Associated State Variable: A_ARG_TYPE_Signature</param>
        /// <param name="HostCertificate">Associated State Variable: A_ARG_TYPE_Certificate</param>
        public void Advertise(System.UInt32 Nonce, System.String HostId, System.String ApplicationId, System.String ApplicationVersion, System.String ApplicationData, System.String HostFriendlyName, System.String ExperienceFriendlyName, System.String ExperienceIconUri, System.String ExperienceEndpointUri, System.String ExperienceEndpointData, System.String SignatureAlgorithm, System.String Signature, System.String HostCertificate) {
            System.Diagnostics.Debug.WriteLine("RemotedExperienceService_Advertise(" + Nonce.ToString() + HostId.ToString() + ApplicationId.ToString() + ApplicationVersion.ToString() + ApplicationData.ToString() + HostFriendlyName.ToString() + ExperienceFriendlyName.ToString() + ExperienceIconUri.ToString() + ExperienceEndpointUri.ToString() + ExperienceEndpointData.ToString() + SignatureAlgorithm.ToString() + Signature.ToString() + HostCertificate.ToString() + ")");
            //ToDo: Add Your implementation here, and remove exception


            // Set the rdp login username/password in the config file.
            SoftSledConfig currConfig = SoftSledConfigManager.ReadConfig();
            currConfig.IsPaired = true;
            currConfig.RdpLoginUserName = "MCX1-[]";
            currConfig.RdpLoginPassword = "clear text";
            SoftSledConfigManager.WriteConfig(currConfig);

            throw (new UPnPCustomException(800, "This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: Inhibit
        /// </summary>
        /// <param name="Nonce">Associated State Variable: A_ARG_TYPE_Nonce</param>
        /// <param name="HostId">Associated State Variable: A_ARG_TYPE_EndpointID</param>
        /// <param name="ApplicationId">Associated State Variable: A_ARG_TYPE_EndpointID</param>
        /// <param name="ApplicationVersion">Associated State Variable: A_ARG_TYPE_Version</param>
        /// <param name="ApplicationData">Associated State Variable: A_ARG_TYPE_AnyString</param>
        /// <param name="ReasonCode">Associated State Variable: A_ARG_TYPE_ReasonCode</param>
        /// <param name="ReasonMessage">Associated State Variable: A_ARG_TYPE_AnyString</param>
        /// <param name="SignatureAlgorithm">Associated State Variable: A_ARG_TYPE_SignAlgorithm</param>
        /// <param name="Signature">Associated State Variable: A_ARG_TYPE_Signature</param>
        /// <param name="HostCertificate">Associated State Variable: A_ARG_TYPE_Certificate</param>
        public void Inhibit(System.UInt32 Nonce, System.String HostId, System.String ApplicationId, System.String ApplicationVersion, System.String ApplicationData, System.UInt32 ReasonCode, System.String ReasonMessage, System.String SignatureAlgorithm, System.String Signature, System.String HostCertificate) {
            System.Diagnostics.Debug.WriteLine("RemotedExperienceService_Inhibit(" + Nonce.ToString() + HostId.ToString() + ApplicationId.ToString() + ApplicationVersion.ToString() + ApplicationData.ToString() + ReasonCode.ToString() + ReasonMessage.ToString() + SignatureAlgorithm.ToString() + Signature.ToString() + HostCertificate.ToString() + ")");
            //ToDo: Add Your implementation here, and remove exception
            throw (new UPnPCustomException(800, "This method has not been completely implemented..."));
        }
    }
}